<!DOCTYPE html>
<html>

<head>
  <link rel="stylesheet" href="./basic.css">
  <link rel="stylesheet" href="./word.css">
  <link rel="stylesheet" href="./bottom.css">
  <link rel="stylesheet" href="./searchbox.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.1/font/bootstrap-icons.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
</head>

<body class="word_body">

  <div class="wordbox">
    <h1>
      <%= itemName %> <i class="bi bi-bookmark" data-id= "itemId" onclick="toggleIcon(this)"></i>

    </h1>
    <ul>
      <h2>뜻</h2>
      <li>
        <%= itemDescription %>
      </li>
      <div class="line"></div>
      <h2>예</h2>
      <li>
        <%= itemDescription2 %>
      </li>
    </ul>
  </div>

  <nav class="nav_form">
    <a class="btn__link" href="#"><i class="bi bi-hand-thumbs-up" style="font-size: 2rem;"></i></a>
    <a class="btn__link" href="#"><i class="bi bi-box-arrow-up" style="font-size: 2rem;"></i></a>
  </nav>

  <%- bottom %>

</body>

<script>
  const id = '<%= itemId %>';

  // 북마크 여부를 서버로부터 받아오는 함수
  function fetchBookmarkStatus(itemId) {
    return fetch(`/api/bookmark/${itemId}`)
      .then(response => response.json())
      .then(data => data.isBookmarked);
  }

  // 북마크 여부에 따라 북마크 아이콘을 설정하는 함수
  function setBookmarkIcon(isBookmarked) {
    const icon = document.querySelector('.bi-bookmark');
    const filledIcon = document.querySelector('.bi-bookmark-fill');

    if (isBookmarked) {
      icon.classList.add('d-none');
      filledIcon.classList.remove('d-none');
    } else {
      icon.classList.remove('d-none');
      filledIcon.classList.add('d-none');
    }
  }

  // 페이지 로드 시 북마크 여부를 확인하여 북마크 아이콘 설정하기
  fetchBookmarkStatus(id).then(isBookmarked => {
    setBookmarkIcon(isBookmarked);
  });

  // 북마크 아이콘 클릭 시 북마크 ON/OFF 처리
  function toggleIcon(icon) {
    const itemId = icon.getAttribute('data-id');

    fetchBookmarkStatus(itemId).then(isBookmarked => {
      if (isBookmarked) {
        // 북마크가 설정되어 있는 경우 해제하기
        fetch('/api/bookmark/remove', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ itemId })
        }).then(() => {
          icon.classList.add('d-none');
          icon.nextElementSibling.classList.remove('d-none');
        });
      } else {
        // 북마크가 설정되어 있지 않은 경우 설정하기
        fetch('/api/bookmark/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ itemId })
        }).then(() => {
          icon.classList.add('d-none');
          icon.previousElementSibling.classList.remove('d-none');
        });
      }
    });
  }
</script>


</html>