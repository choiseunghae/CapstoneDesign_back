<!DOCTYPE html>
<html lang="en">

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>Chat</title>
  <link rel="stylesheet" href="chat.css">
  <link rel="stylesheet" href="style.css">
</head>

<body>
  <section class="msger">
    <header class="msger-header">
      <div class="msger-title">Chat</div>
      <i class="bi bi-x" style="font-size: 2rem;" onclick="goBack()"></i>
    </header>

    <div id="chat-parts-container" class="msger-chat">
      <!-- Chat parts will be added dynamically using JavaScript -->
    </div>

    <form class="msger-inputarea" id="chat-form" action="/chatbot/chat" method="POST">
      <input type="text" name="userInput" class="msger-input" placeholder="Enter your message...">
      <button type="submit" class="msger-send-btn">Send</button>
    </form>

  </section>

  <script>
    const chatForm = document.getElementById('chat-form');
    const chatPartsContainer = document.getElementById('chat-parts-container');

    chatForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      const userInput = event.target.elements.userInput.value;

      // Create a new chat part for the user message
      const userMessagePart = createChatPartElement('right-msg');
      chatPartsContainer.appendChild(userMessagePart);

      // Add the user message to the chat part
      const userMessageElement = createMessageElement('msg-bubble-right', '<%= nickname %>', userInput);
      userMessagePart.appendChild(userMessageElement);

      // Clear the input field
      event.target.elements.userInput.value = '';

      // Send a POST request to the server with the user input
      const response = await fetch('/chatbot/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ userInput })
      });

      if (response.ok) {
        const data = await response.json();
        const botMessage = data.response;

        // Create a new chat part for the bot message
        const botMessagePart = createChatPartElement('left-msg');
        chatPartsContainer.appendChild(botMessagePart);

        // Add the bot message to the chat part
        const botMessageElement = createMessageElement('msg-bubble-left', '챗봇', botMessage);
        botMessagePart.appendChild(botMessageElement);

        // Scroll to the bottom of the chat
        chatPartsContainer.scrollTop = chatPartsContainer.scrollHeight;

        // Focus on the input field for the next user input
        event.target.elements.userInput.focus();
      }
    });

    // Utility function to create a chat part element
    function createChatPartElement(className) {
      const chatPartElement = document.createElement('div');
      chatPartElement.classList.add('msger-chat-part', className);
      chatPartsContainer.prepend(chatPartElement);
      return chatPartElement;
}

    // Utility function to create a message element
    function createMessageElement(className, sender, message) {
      const messageElement = document.createElement('div');
      messageElement.classList.add(className);
      messageElement.innerHTML = `
        <div class="msg-img"></div>
        <div class="msg-bubble">
          <div class="msg-info">
            <div class="msg-info-name">${sender}</div>
          </div>
          <div class="msg-text">${message}</div>
        </div>
      `;
      return messageElement;
    }

    function goBack() {
      window.history.back();
    }
  </script>
  <script src="/color.js"></script>
</body>

</html>