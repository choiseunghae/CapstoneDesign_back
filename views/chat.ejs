<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat</title>
  <link rel="stylesheet" href="chat.css">
  <link rel="stylesheet" href="style.css">
</head>

<body>
  <section class="msger">
    <header class="msger-header">
      <div class="msger-title">Chat</div>
      <i class="bi bi-x" style="font-size: 2rem;" onclick="goBack()"></i>
    </header>

    <div class="msger-container">
      <div id="chat-parts-container">
        <!-- Chat parts will be added dynamically using JavaScript -->
      </div>

    </main>
    
    <form class="msger-inputarea" id="chat-form" action="/chatbot/chat" method="POST">
      <input type="text" name="userInput" class="msger-input" placeholder="Enter your message...">
      <button type="submit" class="msger-send-btn">Send</button>
    </form>

  </section>

  <script>
const chatForm = document.getElementById('chat-form');
  const chatPartsContainer = document.getElementById('chat-parts-container');

  chatForm.addEventListener('submit', async (event) => {
    event.preventDefault();
    const userInput = event.target.elements.userInput.value;

    // Create a new chat part for the user message
    const userMessagePart = createChatPartElement('right-msg');
    chatPartsContainer.appendChild(userMessagePart);

    // Add the user message to the chat part
    const userMessageElement = createMessageElement('msg-bubble', '<%= nickname %>', userInput);
    userMessagePart.appendChild(userMessageElement);

    // Clear the input field
    event.target.elements.userInput.value = '';

    // Send a POST request to the server with the user input
    const response = await fetch('/chatbot/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ userInput })
    });

    if (response.ok) {
      const data = await response.json();
      const botMessage = data.response;

      // Create a new chat part for the bot message
      const botMessagePart = createChatPartElement('left-msg');
      chatPartsContainer.appendChild(botMessagePart);

      // Add the bot message to the chat part
      const botMessageElement = createMessageElement('msg-bubble', '챗봇', botMessage);
      botMessagePart.appendChild(botMessageElement);

      // Scroll to the bottom of the chat
      chatPartsContainer.scrollTop = chatPartsContainer.scrollHeight;

      // Focus on the input field for the next user input
      event.target.elements.userInput.focus();
    }
  });

  // Utility function to create a chat part element
  function createChatPartElement(className) {
    const chatPartElement = document.createElement('div');
    chatPartElement.classList.add('msger-chat-part', className);
    return chatPartElement;
  }

  // Utility function to create a message element
  function createMessageElement(className, sender, message) {
    const messageElement = document.createElement('div');
    messageElement.classList.add(className);
    messageElement.innerHTML = `
      <div class="msg-info">
        <div class="msg-info-name">${sender}</div>
      </div>
      <div class="msg-text">${message}</div>
    `;
    return messageElement;
  }



    function goBack() {
      window.history.back();
    }

    const msgerForm = get(".msger-inputarea");
    const msgerInput = get(".msger-input");
    const msgerChat = get(".msger-chat");

    // Icons made by Freepik from www.flaticon.com
    const BOT_IMG = "https://image.flaticon.com/icons/svg/327/327779.svg";
    const PERSON_IMG = "https://image.flaticon.com/icons/svg/145/145867.svg";
    const BOT_NAME = "챗봇";
    const PERSON_NAME = "닉네임";

    msgerForm.addEventListener("submit", event => {
      event.preventDefault();

      const msgText = msgerInput.value;
      if (!msgText) return;

      appendMessage(PERSON_NAME, PERSON_IMG, "right", msgText);
      msgerInput.value = "";

      botResponse();
    });

    function appendMessage(name, img, side, text) {
      //   Simple solution for small apps
      const msgHTML = `
            <div class="msg ${side}-msg">
              <div class="msg-img" style="background-image: url(${img})"></div>
        
              <div class="msg-bubble">
                <div class="msg-info">
                  <div class="msg-info-name">${name}</div>
                  <div class="msg-info-time">${formatDate(new Date())}</div>
                </div>
        
                <div class="msg-text">${text}</div>
              </div>
            </div>
          `;

      msgerChat.insertAdjacentHTML("beforeend", msgHTML);
      msgerChat.scrollTop += 500;
    }

    function botResponse() {
      const r = random(0, BOT_MSGS.length - 1);
      const msgText = BOT_MSGS[r];
      const delay = msgText.split(" ").length * 100;

      setTimeout(() => {
        appendMessage(BOT_NAME, BOT_IMG, "left", msgText);
      }, delay);
    }

    // Utils
    function get(selector, root = document) {
      return root.querySelector(selector);
    }

    function formatDate(date) {
      const h = "0" + date.getHours();
      const m = "0" + date.getMinutes();

      return `${h.slice(-2)}:${m.slice(-2)}`;
    }

    function random(min, max) {
      return Math.floor(Math.random() * (max - min) + min);
    }
  </script>
  <script src="/color.js"></script>
</body>

</html>